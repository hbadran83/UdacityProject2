Parameters:
  VpcCIDR: 
      Description: IP range (CIDR notation) for this VPC
      Type: String
      Default: 10.0.0.0/16
    
  EnvironmentName:
    Description: Environment name
    Type: String
  
  IGWName:
      Description: Internet Gateway for internet connectivity
      Type: String

  PublicSubnetCIDR1:
      Description: Public Subnet in the first AZ
      Type: String 

  PrivateSubnetCIDR1:
          Description: Private Subnet in the first AZ
          Type: String 
  
  PublicSubnetCIDR2:
    Description: Public Subnet in the Second AZ
    Type: String 

  PrivateSubnetCIDR2:
          Description: Private Subnet in the Second AZ
          Type: String 

  ImageUsed:
          Description: Linux Image Used as  a Parameter
          Type: String         

  SecurityGroupPorts:
          Description: Configure Firewall ports from parameter file
          Type: String

Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - UdacityS3ReadOnlyEC2

  VPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags: 
                - Key: Name 
                  Value: !Ref EnvironmentName


  InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
               - Key: Name
                 Value: !Ref IGWName

  InternetGatewayAssociation:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties: 
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC
  
  PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties: 
            AvailabilityZone:  !Select [ 0, !GetAZs '' ] 
            CidrBlock: !Ref PublicSubnetCIDR1
            MapPublicIpOnLaunch: true
            Tags: 
              - Key: name
                Value: !Sub ${EnvironmentName}--PublicSubnet1
            VpcId: !Ref VPC




  PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties: 
            AvailabilityZone:  !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnetCIDR1
            MapPublicIpOnLaunch: false
            Tags: 
              - Key: name
                Value: !Sub ${EnvironmentName}--PrivateSubnet1
            VpcId: !Ref VPC




  PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
          AvailabilityZone:  !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnetCIDR2
          MapPublicIpOnLaunch: true
          Tags: 
            - Key: name
              Value: !Sub ${EnvironmentName}--PublicSubnet2
          VpcId: !Ref VPC
   
  PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
          AvailabilityZone:  !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref PrivateSubnetCIDR2
          MapPublicIpOnLaunch: false
          Tags: 
            - Key: name
              Value: !Sub ${EnvironmentName}--PrivateSubnet2
          VpcId: !Ref VPC
  
  ElasticIPAddress1:
      DependsOn: InternetGatewayAssociation
      Type: AWS::EC2::EIP
      Properties: 
        Domain: vpc


  ElasticIPAddress2:
      DependsOn: InternetGatewayAssociation
      Type: AWS::EC2::EIP
      Properties: 
        Domain: vpc      

  NATGateway1:
      Type: AWS::EC2::NatGateway
      Properties: 
        AllocationId: !GetAtt ElasticIPAddress1.AllocationId
        SubnetId: !Ref PublicSubnet1
        Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}--NatGateway1

  NATGateway2:
      Type: AWS::EC2::NatGateway
      Properties: 
        AllocationId: !GetAtt ElasticIPAddress2.AllocationId
        SubnetId: !Ref PublicSubnet2
        Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}--NatGateway2



  PublicRouteTable:
      DependsOn: InternetGatewayAssociation
      Type: AWS::EC2::RouteTable
      Properties: 
        Tags: 
          - Key: Name
            Value: !Sub ${EnvironmentName}--Public-RT
        VpcId: !Ref VPC 

  PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)                      

  PublicRouteRules:
      Type: AWS::EC2::Route
      Properties: 
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
        RouteTableId: !Ref PublicRouteTable

  
  RouteRulesForPrivSubnet1:
      Type: AWS::EC2::Route
      Properties: 
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NATGateway1
        RouteTableId: !Ref PrivateRouteTable1        

  RouteRulesForPrivSubnet2:
      Type: AWS::EC2::Route
      Properties: 
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NATGateway2
        RouteTableId: !Ref PrivateRouteTable2   
  
  PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1


  PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet2

  PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2          

Outputs: 
  VPC: 
        Description: A reference to the created VPC
        Value: !Ref VPC
        Export:
          Name: !Sub ${EnvironmentName}-VPCID
  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.

# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html
